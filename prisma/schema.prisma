// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String   // Made optional for social login
  image         String?   // Added for Google avatar
  role          Role      @default(USER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}


model Board {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image  String
  classes   Classes[]
  subjects  Subjects[]
  chapters  Chapters[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Classes {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ClassType
  slug      String    @unique
  boardId   String    @db.ObjectId
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjects  Subjects[]
  chapters  Chapters[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ClassType {
  Primary
  Secondary
  High
  Intermediate
}

model Subjects {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  image    String
  description String
  boardId     String    @db.ObjectId
  classId     String    @db.ObjectId
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  class       Classes     @relation(fields: [classId], references: [id], onDelete: Cascade)
  chapters    Chapters[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapters {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  chapterFile      String
  boardId   String   @db.ObjectId
  classId   String   @db.ObjectId
  subjectId String   @db.ObjectId
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  class     Classes    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subjects  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}