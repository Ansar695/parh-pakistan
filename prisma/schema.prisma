// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Board {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  image  String
  classes   Classes[]
  subjects  Subjects[]
  chapters  Chapters[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Classes {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ClassType
  slug      String    @unique
  boardId   String    @db.ObjectId
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjects  Subjects[]
  chapters  Chapters[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ClassType {
  Primary
  Secondary
  High
  Intermediate
}

model Subjects {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  image    String
  description String
  boardId     String    @db.ObjectId
  classId     String    @db.ObjectId
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  class       Classes     @relation(fields: [classId], references: [id], onDelete: Cascade)
  chapters    Chapters[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapters {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  chapterFile      String
  boardId   String   @db.ObjectId
  classId   String   @db.ObjectId
  subjectId String   @db.ObjectId
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  class     Classes    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subjects  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}